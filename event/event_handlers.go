// Code generated by tools/cmd/Handlers; DO NOT EDIT
// See events.go

package event

// Following are all the event types.
// Event type values are used to match the events returned by Discord.
// EventTypes surrounded by __ are synthetic and are internal to DiscordGo.
const (
	ApplicationCommandPermissionsUpdateType = "APPLICATION_COMMAND_PERMISSIONS_UPDATE"
	AutoModerationActionExecutionType       = "AUTO_MODERATION_ACTION_EXECUTION"
	AutoModerationRuleCreateType            = "AUTO_MODERATION_RULE_CREATE"
	AutoModerationRuleDeleteType            = "AUTO_MODERATION_RULE_DELETE"
	AutoModerationRuleUpdateType            = "AUTO_MODERATION_RULE_UPDATE"
	ChannelCreateType                       = "CHANNEL_CREATE"
	ChannelDeleteType                       = "CHANNEL_DELETE"
	ChannelPinsUpdateType                   = "CHANNEL_PINS_UPDATE"
	ChannelUpdateType                       = "CHANNEL_UPDATE"
	ConnectType                             = "__CONNECT__"
	DisconnectType                          = "__DISCONNECT__"
	EntitlementCreateType                   = "ENTITLEMENT_CREATE"
	EntitlementDeleteType                   = "ENTITLEMENT_DELETE"
	EntitlementUpdateType                   = "ENTITLEMENT_UPDATE"
	EventType                               = "__EVENT__"
	GuildAuditLogEntryCreateType            = "GUILD_AUDIT_LOG_ENTRY_CREATE"
	GuildBanAddType                         = "GUILD_BAN_ADD"
	GuildBanRemoveType                      = "GUILD_BAN_REMOVE"
	GuildCreateType                         = "GUILD_CREATE"
	GuildDeleteType                         = "GUILD_DELETE"
	GuildEmojisUpdateType                   = "GUILD_EMOJIS_UPDATE"
	GuildIntegrationsUpdateType             = "GUILD_INTEGRATIONS_UPDATE"
	GuildMemberAddType                      = "GUILD_MEMBER_ADD"
	GuildMemberRemoveType                   = "GUILD_MEMBER_REMOVE"
	GuildMemberUpdateType                   = "GUILD_MEMBER_UPDATE"
	GuildMembersChunkType                   = "GUILD_MEMBERS_CHUNK"
	GuildRoleCreateType                     = "GUILD_ROLE_CREATE"
	GuildRoleDeleteType                     = "GUILD_ROLE_DELETE"
	GuildRoleUpdateType                     = "GUILD_ROLE_UPDATE"
	GuildScheduledEventCreateType           = "GUILD_SCHEDULED_EVENT_CREATE"
	GuildScheduledEventDeleteType           = "GUILD_SCHEDULED_EVENT_DELETE"
	GuildScheduledEventUpdateType           = "GUILD_SCHEDULED_EVENT_UPDATE"
	GuildScheduledEventUserAddType          = "GUILD_SCHEDULED_EVENT_USER_ADD"
	GuildScheduledEventUserRemoveType       = "GUILD_SCHEDULED_EVENT_USER_REMOVE"
	GuildStickersUpdateType                 = "GUILD_STICKERS_UPDATE"
	GuildUpdateType                         = "GUILD_UPDATE"
	IntegrationCreateType                   = "INTEGRATION_CREATE"
	IntegrationDeleteType                   = "INTEGRATION_DELETE"
	IntegrationUpdateType                   = "INTEGRATION_UPDATE"
	InteractionCreateType                   = "INTERACTION_CREATE"
	InviteCreateType                        = "INVITE_CREATE"
	InviteDeleteType                        = "INVITE_DELETE"
	MessageCreateType                       = "MESSAGE_CREATE"
	MessageDeleteType                       = "MESSAGE_DELETE"
	MessageDeleteBulkType                   = "MESSAGE_DELETE_BULK"
	MessagePollVoteAddType                  = "MESSAGE_POLL_VOTE_ADD"
	MessagePollVoteRemoveType               = "MESSAGE_POLL_VOTE_REMOVE"
	MessageReactionAddType                  = "MESSAGE_REACTION_ADD"
	MessageReactionRemoveType               = "MESSAGE_REACTION_REMOVE"
	MessageReactionRemoveAllType            = "MESSAGE_REACTION_REMOVE_ALL"
	MessageUpdateType                       = "MESSAGE_UPDATE"
	PresenceUpdateType                      = "PRESENCE_UPDATE"
	PresencesReplaceType                    = "PRESENCES_REPLACE"
	RateLimitType                           = "__RATE_LIMIT__"
	ReadyType                               = "READY"
	ResumedType                             = "RESUMED"
	StageInstanceEventCreateType            = "STAGE_INSTANCE_EVENT_CREATE"
	StageInstanceEventDeleteType            = "STAGE_INSTANCE_EVENT_DELETE"
	StageInstanceEventUpdateType            = "STAGE_INSTANCE_EVENT_UPDATE"
	SubscriptionCreateType                  = "SUBSCRIPTION_CREATE"
	SubscriptionDeleteType                  = "SUBSCRIPTION_DELETE"
	SubscriptionUpdateType                  = "SUBSCRIPTION_UPDATE"
	ThreadCreateType                        = "THREAD_CREATE"
	ThreadDeleteType                        = "THREAD_DELETE"
	ThreadListSyncType                      = "THREAD_LIST_SYNC"
	ThreadMemberUpdateType                  = "THREAD_MEMBER_UPDATE"
	ThreadMembersUpdateType                 = "THREAD_MEMBERS_UPDATE"
	ThreadUpdateType                        = "THREAD_UPDATE"
	TypingStartType                         = "TYPING_START"
	UserUpdateType                          = "USER_UPDATE"
	VoiceServerUpdateType                   = "VOICE_SERVER_UPDATE"
	VoiceStateUpdateType                    = "VOICE_STATE_UPDATE"
	WebhooksUpdateType                      = "WEBHOOKS_UPDATE"
)

// applicationCommandPermissionsUpdateHandler is an event handler for ApplicationCommandPermissionsUpdate events.
type applicationCommandPermissionsUpdateHandler func(Session, *ApplicationCommandPermissionsUpdate)

// Type returns the event type for ApplicationCommandPermissionsUpdate events.
func (eh applicationCommandPermissionsUpdateHandler) Type() string {
	return ApplicationCommandPermissionsUpdateType
}

// New returns a new instance of ApplicationCommandPermissionsUpdate.
func (eh applicationCommandPermissionsUpdateHandler) New() any {
	return &ApplicationCommandPermissionsUpdate{}
}

// Handle is the handler for ApplicationCommandPermissionsUpdate events.
func (eh applicationCommandPermissionsUpdateHandler) Handle(s Session, i any) {
	if t, ok := i.(*ApplicationCommandPermissionsUpdate); ok {
		eh(s, t)
	}
}

// autoModerationActionExecutionHandler is an event handler for AutoModerationActionExecution events.
type autoModerationActionExecutionHandler func(Session, *AutoModerationActionExecution)

// Type returns the event type for AutoModerationActionExecution events.
func (eh autoModerationActionExecutionHandler) Type() string {
	return AutoModerationActionExecutionType
}

// New returns a new instance of AutoModerationActionExecution.
func (eh autoModerationActionExecutionHandler) New() any {
	return &AutoModerationActionExecution{}
}

// Handle is the handler for AutoModerationActionExecution events.
func (eh autoModerationActionExecutionHandler) Handle(s Session, i any) {
	if t, ok := i.(*AutoModerationActionExecution); ok {
		eh(s, t)
	}
}

// autoModerationRuleCreateHandler is an event handler for AutoModerationRuleCreate events.
type autoModerationRuleCreateHandler func(Session, *AutoModerationRuleCreate)

// Type returns the event type for AutoModerationRuleCreate events.
func (eh autoModerationRuleCreateHandler) Type() string {
	return AutoModerationRuleCreateType
}

// New returns a new instance of AutoModerationRuleCreate.
func (eh autoModerationRuleCreateHandler) New() any {
	return &AutoModerationRuleCreate{}
}

// Handle is the handler for AutoModerationRuleCreate events.
func (eh autoModerationRuleCreateHandler) Handle(s Session, i any) {
	if t, ok := i.(*AutoModerationRuleCreate); ok {
		eh(s, t)
	}
}

// autoModerationRuleDeleteHandler is an event handler for AutoModerationRuleDelete events.
type autoModerationRuleDeleteHandler func(Session, *AutoModerationRuleDelete)

// Type returns the event type for AutoModerationRuleDelete events.
func (eh autoModerationRuleDeleteHandler) Type() string {
	return AutoModerationRuleDeleteType
}

// New returns a new instance of AutoModerationRuleDelete.
func (eh autoModerationRuleDeleteHandler) New() any {
	return &AutoModerationRuleDelete{}
}

// Handle is the handler for AutoModerationRuleDelete events.
func (eh autoModerationRuleDeleteHandler) Handle(s Session, i any) {
	if t, ok := i.(*AutoModerationRuleDelete); ok {
		eh(s, t)
	}
}

// autoModerationRuleUpdateHandler is an event handler for AutoModerationRuleUpdate events.
type autoModerationRuleUpdateHandler func(Session, *AutoModerationRuleUpdate)

// Type returns the event type for AutoModerationRuleUpdate events.
func (eh autoModerationRuleUpdateHandler) Type() string {
	return AutoModerationRuleUpdateType
}

// New returns a new instance of AutoModerationRuleUpdate.
func (eh autoModerationRuleUpdateHandler) New() any {
	return &AutoModerationRuleUpdate{}
}

// Handle is the handler for AutoModerationRuleUpdate events.
func (eh autoModerationRuleUpdateHandler) Handle(s Session, i any) {
	if t, ok := i.(*AutoModerationRuleUpdate); ok {
		eh(s, t)
	}
}

// channelCreateHandler is an event handler for ChannelCreate events.
type channelCreateHandler func(Session, *ChannelCreate)

// Type returns the event type for ChannelCreate events.
func (eh channelCreateHandler) Type() string {
	return ChannelCreateType
}

// New returns a new instance of ChannelCreate.
func (eh channelCreateHandler) New() any {
	return &ChannelCreate{}
}

// Handle is the handler for ChannelCreate events.
func (eh channelCreateHandler) Handle(s Session, i any) {
	if t, ok := i.(*ChannelCreate); ok {
		eh(s, t)
	}
}

// channelDeleteHandler is an event handler for ChannelDelete events.
type channelDeleteHandler func(Session, *ChannelDelete)

// Type returns the event type for ChannelDelete events.
func (eh channelDeleteHandler) Type() string {
	return ChannelDeleteType
}

// New returns a new instance of ChannelDelete.
func (eh channelDeleteHandler) New() any {
	return &ChannelDelete{}
}

// Handle is the handler for ChannelDelete events.
func (eh channelDeleteHandler) Handle(s Session, i any) {
	if t, ok := i.(*ChannelDelete); ok {
		eh(s, t)
	}
}

// channelPinsUpdateHandler is an event handler for ChannelPinsUpdate events.
type channelPinsUpdateHandler func(Session, *ChannelPinsUpdate)

// Type returns the event type for ChannelPinsUpdate events.
func (eh channelPinsUpdateHandler) Type() string {
	return ChannelPinsUpdateType
}

// New returns a new instance of ChannelPinsUpdate.
func (eh channelPinsUpdateHandler) New() any {
	return &ChannelPinsUpdate{}
}

// Handle is the handler for ChannelPinsUpdate events.
func (eh channelPinsUpdateHandler) Handle(s Session, i any) {
	if t, ok := i.(*ChannelPinsUpdate); ok {
		eh(s, t)
	}
}

// channelUpdateHandler is an event handler for ChannelUpdate events.
type channelUpdateHandler func(Session, *ChannelUpdate)

// Type returns the event type for ChannelUpdate events.
func (eh channelUpdateHandler) Type() string {
	return ChannelUpdateType
}

// New returns a new instance of ChannelUpdate.
func (eh channelUpdateHandler) New() any {
	return &ChannelUpdate{}
}

// Handle is the handler for ChannelUpdate events.
func (eh channelUpdateHandler) Handle(s Session, i any) {
	if t, ok := i.(*ChannelUpdate); ok {
		eh(s, t)
	}
}

// connectHandler is an event handler for Connect events.
type connectHandler func(Session, *Connect)

// Type returns the event type for Connect events.
func (eh connectHandler) Type() string {
	return ConnectType
}

// Handle is the handler for Connect events.
func (eh connectHandler) Handle(s Session, i any) {
	if t, ok := i.(*Connect); ok {
		eh(s, t)
	}
}

// disconnectHandler is an event handler for Disconnect events.
type disconnectHandler func(Session, *Disconnect)

// Type returns the event type for Disconnect events.
func (eh disconnectHandler) Type() string {
	return DisconnectType
}

// Handle is the handler for Disconnect events.
func (eh disconnectHandler) Handle(s Session, i any) {
	if t, ok := i.(*Disconnect); ok {
		eh(s, t)
	}
}

// entitlementCreateHandler is an event handler for EntitlementCreate events.
type entitlementCreateHandler func(Session, *EntitlementCreate)

// Type returns the event type for EntitlementCreate events.
func (eh entitlementCreateHandler) Type() string {
	return EntitlementCreateType
}

// New returns a new instance of EntitlementCreate.
func (eh entitlementCreateHandler) New() any {
	return &EntitlementCreate{}
}

// Handle is the handler for EntitlementCreate events.
func (eh entitlementCreateHandler) Handle(s Session, i any) {
	if t, ok := i.(*EntitlementCreate); ok {
		eh(s, t)
	}
}

// entitlementDeleteHandler is an event handler for EntitlementDelete events.
type entitlementDeleteHandler func(Session, *EntitlementDelete)

// Type returns the event type for EntitlementDelete events.
func (eh entitlementDeleteHandler) Type() string {
	return EntitlementDeleteType
}

// New returns a new instance of EntitlementDelete.
func (eh entitlementDeleteHandler) New() any {
	return &EntitlementDelete{}
}

// Handle is the handler for EntitlementDelete events.
func (eh entitlementDeleteHandler) Handle(s Session, i any) {
	if t, ok := i.(*EntitlementDelete); ok {
		eh(s, t)
	}
}

// entitlementUpdateHandler is an event handler for EntitlementUpdate events.
type entitlementUpdateHandler func(Session, *EntitlementUpdate)

// Type returns the event type for EntitlementUpdate events.
func (eh entitlementUpdateHandler) Type() string {
	return EntitlementUpdateType
}

// New returns a new instance of EntitlementUpdate.
func (eh entitlementUpdateHandler) New() any {
	return &EntitlementUpdate{}
}

// Handle is the handler for EntitlementUpdate events.
func (eh entitlementUpdateHandler) Handle(s Session, i any) {
	if t, ok := i.(*EntitlementUpdate); ok {
		eh(s, t)
	}
}

// eventHandler is an event handler for Event events.
type eventHandler func(Session, *Event)

// Type returns the event type for Event events.
func (eh eventHandler) Type() string {
	return EventType
}

// Handle is the handler for Event events.
func (eh eventHandler) Handle(s Session, i any) {
	if t, ok := i.(*Event); ok {
		eh(s, t)
	}
}

// guildAuditLogEntryCreateHandler is an event handler for GuildAuditLogEntryCreate events.
type guildAuditLogEntryCreateHandler func(Session, *GuildAuditLogEntryCreate)

// Type returns the event type for GuildAuditLogEntryCreate events.
func (eh guildAuditLogEntryCreateHandler) Type() string {
	return GuildAuditLogEntryCreateType
}

// New returns a new instance of GuildAuditLogEntryCreate.
func (eh guildAuditLogEntryCreateHandler) New() any {
	return &GuildAuditLogEntryCreate{}
}

// Handle is the handler for GuildAuditLogEntryCreate events.
func (eh guildAuditLogEntryCreateHandler) Handle(s Session, i any) {
	if t, ok := i.(*GuildAuditLogEntryCreate); ok {
		eh(s, t)
	}
}

// guildBanAddHandler is an event handler for GuildBanAdd events.
type guildBanAddHandler func(Session, *GuildBanAdd)

// Type returns the event type for GuildBanAdd events.
func (eh guildBanAddHandler) Type() string {
	return GuildBanAddType
}

// New returns a new instance of GuildBanAdd.
func (eh guildBanAddHandler) New() any {
	return &GuildBanAdd{}
}

// Handle is the handler for GuildBanAdd events.
func (eh guildBanAddHandler) Handle(s Session, i any) {
	if t, ok := i.(*GuildBanAdd); ok {
		eh(s, t)
	}
}

// guildBanRemoveHandler is an event handler for GuildBanRemove events.
type guildBanRemoveHandler func(Session, *GuildBanRemove)

// Type returns the event type for GuildBanRemove events.
func (eh guildBanRemoveHandler) Type() string {
	return GuildBanRemoveType
}

// New returns a new instance of GuildBanRemove.
func (eh guildBanRemoveHandler) New() any {
	return &GuildBanRemove{}
}

// Handle is the handler for GuildBanRemove events.
func (eh guildBanRemoveHandler) Handle(s Session, i any) {
	if t, ok := i.(*GuildBanRemove); ok {
		eh(s, t)
	}
}

// guildCreateHandler is an event handler for GuildCreate events.
type guildCreateHandler func(Session, *GuildCreate)

// Type returns the event type for GuildCreate events.
func (eh guildCreateHandler) Type() string {
	return GuildCreateType
}

// New returns a new instance of GuildCreate.
func (eh guildCreateHandler) New() any {
	return &GuildCreate{}
}

// Handle is the handler for GuildCreate events.
func (eh guildCreateHandler) Handle(s Session, i any) {
	if t, ok := i.(*GuildCreate); ok {
		eh(s, t)
	}
}

// guildDeleteHandler is an event handler for GuildDelete events.
type guildDeleteHandler func(Session, *GuildDelete)

// Type returns the event type for GuildDelete events.
func (eh guildDeleteHandler) Type() string {
	return GuildDeleteType
}

// New returns a new instance of GuildDelete.
func (eh guildDeleteHandler) New() any {
	return &GuildDelete{}
}

// Handle is the handler for GuildDelete events.
func (eh guildDeleteHandler) Handle(s Session, i any) {
	if t, ok := i.(*GuildDelete); ok {
		eh(s, t)
	}
}

// guildEmojisUpdateHandler is an event handler for GuildEmojisUpdate events.
type guildEmojisUpdateHandler func(Session, *GuildEmojisUpdate)

// Type returns the event type for GuildEmojisUpdate events.
func (eh guildEmojisUpdateHandler) Type() string {
	return GuildEmojisUpdateType
}

// New returns a new instance of GuildEmojisUpdate.
func (eh guildEmojisUpdateHandler) New() any {
	return &GuildEmojisUpdate{}
}

// Handle is the handler for GuildEmojisUpdate events.
func (eh guildEmojisUpdateHandler) Handle(s Session, i any) {
	if t, ok := i.(*GuildEmojisUpdate); ok {
		eh(s, t)
	}
}

// guildIntegrationsUpdateHandler is an event handler for GuildIntegrationsUpdate events.
type guildIntegrationsUpdateHandler func(Session, *GuildIntegrationsUpdate)

// Type returns the event type for GuildIntegrationsUpdate events.
func (eh guildIntegrationsUpdateHandler) Type() string {
	return GuildIntegrationsUpdateType
}

// New returns a new instance of GuildIntegrationsUpdate.
func (eh guildIntegrationsUpdateHandler) New() any {
	return &GuildIntegrationsUpdate{}
}

// Handle is the handler for GuildIntegrationsUpdate events.
func (eh guildIntegrationsUpdateHandler) Handle(s Session, i any) {
	if t, ok := i.(*GuildIntegrationsUpdate); ok {
		eh(s, t)
	}
}

// guildMemberAddHandler is an event handler for GuildMemberAdd events.
type guildMemberAddHandler func(Session, *GuildMemberAdd)

// Type returns the event type for GuildMemberAdd events.
func (eh guildMemberAddHandler) Type() string {
	return GuildMemberAddType
}

// New returns a new instance of GuildMemberAdd.
func (eh guildMemberAddHandler) New() any {
	return &GuildMemberAdd{}
}

// Handle is the handler for GuildMemberAdd events.
func (eh guildMemberAddHandler) Handle(s Session, i any) {
	if t, ok := i.(*GuildMemberAdd); ok {
		eh(s, t)
	}
}

// guildMemberRemoveHandler is an event handler for GuildMemberRemove events.
type guildMemberRemoveHandler func(Session, *GuildMemberRemove)

// Type returns the event type for GuildMemberRemove events.
func (eh guildMemberRemoveHandler) Type() string {
	return GuildMemberRemoveType
}

// New returns a new instance of GuildMemberRemove.
func (eh guildMemberRemoveHandler) New() any {
	return &GuildMemberRemove{}
}

// Handle is the handler for GuildMemberRemove events.
func (eh guildMemberRemoveHandler) Handle(s Session, i any) {
	if t, ok := i.(*GuildMemberRemove); ok {
		eh(s, t)
	}
}

// guildMemberUpdateHandler is an event handler for GuildMemberUpdate events.
type guildMemberUpdateHandler func(Session, *GuildMemberUpdate)

// Type returns the event type for GuildMemberUpdate events.
func (eh guildMemberUpdateHandler) Type() string {
	return GuildMemberUpdateType
}

// New returns a new instance of GuildMemberUpdate.
func (eh guildMemberUpdateHandler) New() any {
	return &GuildMemberUpdate{}
}

// Handle is the handler for GuildMemberUpdate events.
func (eh guildMemberUpdateHandler) Handle(s Session, i any) {
	if t, ok := i.(*GuildMemberUpdate); ok {
		eh(s, t)
	}
}

// guildMembersChunkHandler is an event handler for GuildMembersChunk events.
type guildMembersChunkHandler func(Session, *GuildMembersChunk)

// Type returns the event type for GuildMembersChunk events.
func (eh guildMembersChunkHandler) Type() string {
	return GuildMembersChunkType
}

// New returns a new instance of GuildMembersChunk.
func (eh guildMembersChunkHandler) New() any {
	return &GuildMembersChunk{}
}

// Handle is the handler for GuildMembersChunk events.
func (eh guildMembersChunkHandler) Handle(s Session, i any) {
	if t, ok := i.(*GuildMembersChunk); ok {
		eh(s, t)
	}
}

// guildRoleCreateHandler is an event handler for GuildRoleCreate events.
type guildRoleCreateHandler func(Session, *GuildRoleCreate)

// Type returns the event type for GuildRoleCreate events.
func (eh guildRoleCreateHandler) Type() string {
	return GuildRoleCreateType
}

// New returns a new instance of GuildRoleCreate.
func (eh guildRoleCreateHandler) New() any {
	return &GuildRoleCreate{}
}

// Handle is the handler for GuildRoleCreate events.
func (eh guildRoleCreateHandler) Handle(s Session, i any) {
	if t, ok := i.(*GuildRoleCreate); ok {
		eh(s, t)
	}
}

// guildRoleDeleteHandler is an event handler for GuildRoleDelete events.
type guildRoleDeleteHandler func(Session, *GuildRoleDelete)

// Type returns the event type for GuildRoleDelete events.
func (eh guildRoleDeleteHandler) Type() string {
	return GuildRoleDeleteType
}

// New returns a new instance of GuildRoleDelete.
func (eh guildRoleDeleteHandler) New() any {
	return &GuildRoleDelete{}
}

// Handle is the handler for GuildRoleDelete events.
func (eh guildRoleDeleteHandler) Handle(s Session, i any) {
	if t, ok := i.(*GuildRoleDelete); ok {
		eh(s, t)
	}
}

// guildRoleUpdateHandler is an event handler for GuildRoleUpdate events.
type guildRoleUpdateHandler func(Session, *GuildRoleUpdate)

// Type returns the event type for GuildRoleUpdate events.
func (eh guildRoleUpdateHandler) Type() string {
	return GuildRoleUpdateType
}

// New returns a new instance of GuildRoleUpdate.
func (eh guildRoleUpdateHandler) New() any {
	return &GuildRoleUpdate{}
}

// Handle is the handler for GuildRoleUpdate events.
func (eh guildRoleUpdateHandler) Handle(s Session, i any) {
	if t, ok := i.(*GuildRoleUpdate); ok {
		eh(s, t)
	}
}

// guildScheduledEventCreateHandler is an event handler for GuildScheduledEventCreate events.
type guildScheduledEventCreateHandler func(Session, *GuildScheduledEventCreate)

// Type returns the event type for GuildScheduledEventCreate events.
func (eh guildScheduledEventCreateHandler) Type() string {
	return GuildScheduledEventCreateType
}

// New returns a new instance of GuildScheduledEventCreate.
func (eh guildScheduledEventCreateHandler) New() any {
	return &GuildScheduledEventCreate{}
}

// Handle is the handler for GuildScheduledEventCreate events.
func (eh guildScheduledEventCreateHandler) Handle(s Session, i any) {
	if t, ok := i.(*GuildScheduledEventCreate); ok {
		eh(s, t)
	}
}

// guildScheduledEventDeleteHandler is an event handler for GuildScheduledEventDelete events.
type guildScheduledEventDeleteHandler func(Session, *GuildScheduledEventDelete)

// Type returns the event type for GuildScheduledEventDelete events.
func (eh guildScheduledEventDeleteHandler) Type() string {
	return GuildScheduledEventDeleteType
}

// New returns a new instance of GuildScheduledEventDelete.
func (eh guildScheduledEventDeleteHandler) New() any {
	return &GuildScheduledEventDelete{}
}

// Handle is the handler for GuildScheduledEventDelete events.
func (eh guildScheduledEventDeleteHandler) Handle(s Session, i any) {
	if t, ok := i.(*GuildScheduledEventDelete); ok {
		eh(s, t)
	}
}

// guildScheduledEventUpdateHandler is an event handler for GuildScheduledEventUpdate events.
type guildScheduledEventUpdateHandler func(Session, *GuildScheduledEventUpdate)

// Type returns the event type for GuildScheduledEventUpdate events.
func (eh guildScheduledEventUpdateHandler) Type() string {
	return GuildScheduledEventUpdateType
}

// New returns a new instance of GuildScheduledEventUpdate.
func (eh guildScheduledEventUpdateHandler) New() any {
	return &GuildScheduledEventUpdate{}
}

// Handle is the handler for GuildScheduledEventUpdate events.
func (eh guildScheduledEventUpdateHandler) Handle(s Session, i any) {
	if t, ok := i.(*GuildScheduledEventUpdate); ok {
		eh(s, t)
	}
}

// guildScheduledEventUserAddHandler is an event handler for GuildScheduledEventUserAdd events.
type guildScheduledEventUserAddHandler func(Session, *GuildScheduledEventUserAdd)

// Type returns the event type for GuildScheduledEventUserAdd events.
func (eh guildScheduledEventUserAddHandler) Type() string {
	return GuildScheduledEventUserAddType
}

// New returns a new instance of GuildScheduledEventUserAdd.
func (eh guildScheduledEventUserAddHandler) New() any {
	return &GuildScheduledEventUserAdd{}
}

// Handle is the handler for GuildScheduledEventUserAdd events.
func (eh guildScheduledEventUserAddHandler) Handle(s Session, i any) {
	if t, ok := i.(*GuildScheduledEventUserAdd); ok {
		eh(s, t)
	}
}

// guildScheduledEventUserRemoveHandler is an event handler for GuildScheduledEventUserRemove events.
type guildScheduledEventUserRemoveHandler func(Session, *GuildScheduledEventUserRemove)

// Type returns the event type for GuildScheduledEventUserRemove events.
func (eh guildScheduledEventUserRemoveHandler) Type() string {
	return GuildScheduledEventUserRemoveType
}

// New returns a new instance of GuildScheduledEventUserRemove.
func (eh guildScheduledEventUserRemoveHandler) New() any {
	return &GuildScheduledEventUserRemove{}
}

// Handle is the handler for GuildScheduledEventUserRemove events.
func (eh guildScheduledEventUserRemoveHandler) Handle(s Session, i any) {
	if t, ok := i.(*GuildScheduledEventUserRemove); ok {
		eh(s, t)
	}
}

// guildStickersUpdateHandler is an event handler for GuildStickersUpdate events.
type guildStickersUpdateHandler func(Session, *GuildStickersUpdate)

// Type returns the event type for GuildStickersUpdate events.
func (eh guildStickersUpdateHandler) Type() string {
	return GuildStickersUpdateType
}

// New returns a new instance of GuildStickersUpdate.
func (eh guildStickersUpdateHandler) New() any {
	return &GuildStickersUpdate{}
}

// Handle is the handler for GuildStickersUpdate events.
func (eh guildStickersUpdateHandler) Handle(s Session, i any) {
	if t, ok := i.(*GuildStickersUpdate); ok {
		eh(s, t)
	}
}

// guildUpdateHandler is an event handler for GuildUpdate events.
type guildUpdateHandler func(Session, *GuildUpdate)

// Type returns the event type for GuildUpdate events.
func (eh guildUpdateHandler) Type() string {
	return GuildUpdateType
}

// New returns a new instance of GuildUpdate.
func (eh guildUpdateHandler) New() any {
	return &GuildUpdate{}
}

// Handle is the handler for GuildUpdate events.
func (eh guildUpdateHandler) Handle(s Session, i any) {
	if t, ok := i.(*GuildUpdate); ok {
		eh(s, t)
	}
}

// integrationCreateHandler is an event handler for IntegrationCreate events.
type integrationCreateHandler func(Session, *IntegrationCreate)

// Type returns the event type for IntegrationCreate events.
func (eh integrationCreateHandler) Type() string {
	return IntegrationCreateType
}

// New returns a new instance of IntegrationCreate.
func (eh integrationCreateHandler) New() any {
	return &IntegrationCreate{}
}

// Handle is the handler for IntegrationCreate events.
func (eh integrationCreateHandler) Handle(s Session, i any) {
	if t, ok := i.(*IntegrationCreate); ok {
		eh(s, t)
	}
}

// integrationDeleteHandler is an event handler for IntegrationDelete events.
type integrationDeleteHandler func(Session, *IntegrationDelete)

// Type returns the event type for IntegrationDelete events.
func (eh integrationDeleteHandler) Type() string {
	return IntegrationDeleteType
}

// New returns a new instance of IntegrationDelete.
func (eh integrationDeleteHandler) New() any {
	return &IntegrationDelete{}
}

// Handle is the handler for IntegrationDelete events.
func (eh integrationDeleteHandler) Handle(s Session, i any) {
	if t, ok := i.(*IntegrationDelete); ok {
		eh(s, t)
	}
}

// integrationUpdateHandler is an event handler for IntegrationUpdate events.
type integrationUpdateHandler func(Session, *IntegrationUpdate)

// Type returns the event type for IntegrationUpdate events.
func (eh integrationUpdateHandler) Type() string {
	return IntegrationUpdateType
}

// New returns a new instance of IntegrationUpdate.
func (eh integrationUpdateHandler) New() any {
	return &IntegrationUpdate{}
}

// Handle is the handler for IntegrationUpdate events.
func (eh integrationUpdateHandler) Handle(s Session, i any) {
	if t, ok := i.(*IntegrationUpdate); ok {
		eh(s, t)
	}
}

// interactionCreateHandler is an event handler for InteractionCreate events.
type interactionCreateHandler func(Session, *InteractionCreate)

// Type returns the event type for InteractionCreate events.
func (eh interactionCreateHandler) Type() string {
	return InteractionCreateType
}

// New returns a new instance of InteractionCreate.
func (eh interactionCreateHandler) New() any {
	return &InteractionCreate{}
}

// Handle is the handler for InteractionCreate events.
func (eh interactionCreateHandler) Handle(s Session, i any) {
	if t, ok := i.(*InteractionCreate); ok {
		eh(s, t)
	}
}

// inviteCreateHandler is an event handler for InviteCreate events.
type inviteCreateHandler func(Session, *InviteCreate)

// Type returns the event type for InviteCreate events.
func (eh inviteCreateHandler) Type() string {
	return InviteCreateType
}

// New returns a new instance of InviteCreate.
func (eh inviteCreateHandler) New() any {
	return &InviteCreate{}
}

// Handle is the handler for InviteCreate events.
func (eh inviteCreateHandler) Handle(s Session, i any) {
	if t, ok := i.(*InviteCreate); ok {
		eh(s, t)
	}
}

// inviteDeleteHandler is an event handler for InviteDelete events.
type inviteDeleteHandler func(Session, *InviteDelete)

// Type returns the event type for InviteDelete events.
func (eh inviteDeleteHandler) Type() string {
	return InviteDeleteType
}

// New returns a new instance of InviteDelete.
func (eh inviteDeleteHandler) New() any {
	return &InviteDelete{}
}

// Handle is the handler for InviteDelete events.
func (eh inviteDeleteHandler) Handle(s Session, i any) {
	if t, ok := i.(*InviteDelete); ok {
		eh(s, t)
	}
}

// messageCreateHandler is an event handler for MessageCreate events.
type messageCreateHandler func(Session, *MessageCreate)

// Type returns the event type for MessageCreate events.
func (eh messageCreateHandler) Type() string {
	return MessageCreateType
}

// New returns a new instance of MessageCreate.
func (eh messageCreateHandler) New() any {
	return &MessageCreate{}
}

// Handle is the handler for MessageCreate events.
func (eh messageCreateHandler) Handle(s Session, i any) {
	if t, ok := i.(*MessageCreate); ok {
		eh(s, t)
	}
}

// messageDeleteHandler is an event handler for MessageDelete events.
type messageDeleteHandler func(Session, *MessageDelete)

// Type returns the event type for MessageDelete events.
func (eh messageDeleteHandler) Type() string {
	return MessageDeleteType
}

// New returns a new instance of MessageDelete.
func (eh messageDeleteHandler) New() any {
	return &MessageDelete{}
}

// Handle is the handler for MessageDelete events.
func (eh messageDeleteHandler) Handle(s Session, i any) {
	if t, ok := i.(*MessageDelete); ok {
		eh(s, t)
	}
}

// messageDeleteBulkHandler is an event handler for MessageDeleteBulk events.
type messageDeleteBulkHandler func(Session, *MessageDeleteBulk)

// Type returns the event type for MessageDeleteBulk events.
func (eh messageDeleteBulkHandler) Type() string {
	return MessageDeleteBulkType
}

// New returns a new instance of MessageDeleteBulk.
func (eh messageDeleteBulkHandler) New() any {
	return &MessageDeleteBulk{}
}

// Handle is the handler for MessageDeleteBulk events.
func (eh messageDeleteBulkHandler) Handle(s Session, i any) {
	if t, ok := i.(*MessageDeleteBulk); ok {
		eh(s, t)
	}
}

// messagePollVoteAddHandler is an event handler for MessagePollVoteAdd events.
type messagePollVoteAddHandler func(Session, *MessagePollVoteAdd)

// Type returns the event type for MessagePollVoteAdd events.
func (eh messagePollVoteAddHandler) Type() string {
	return MessagePollVoteAddType
}

// New returns a new instance of MessagePollVoteAdd.
func (eh messagePollVoteAddHandler) New() any {
	return &MessagePollVoteAdd{}
}

// Handle is the handler for MessagePollVoteAdd events.
func (eh messagePollVoteAddHandler) Handle(s Session, i any) {
	if t, ok := i.(*MessagePollVoteAdd); ok {
		eh(s, t)
	}
}

// messagePollVoteRemoveHandler is an event handler for MessagePollVoteRemove events.
type messagePollVoteRemoveHandler func(Session, *MessagePollVoteRemove)

// Type returns the event type for MessagePollVoteRemove events.
func (eh messagePollVoteRemoveHandler) Type() string {
	return MessagePollVoteRemoveType
}

// New returns a new instance of MessagePollVoteRemove.
func (eh messagePollVoteRemoveHandler) New() any {
	return &MessagePollVoteRemove{}
}

// Handle is the handler for MessagePollVoteRemove events.
func (eh messagePollVoteRemoveHandler) Handle(s Session, i any) {
	if t, ok := i.(*MessagePollVoteRemove); ok {
		eh(s, t)
	}
}

// messageReactionAddHandler is an event handler for MessageReactionAdd events.
type messageReactionAddHandler func(Session, *MessageReactionAdd)

// Type returns the event type for MessageReactionAdd events.
func (eh messageReactionAddHandler) Type() string {
	return MessageReactionAddType
}

// New returns a new instance of MessageReactionAdd.
func (eh messageReactionAddHandler) New() any {
	return &MessageReactionAdd{}
}

// Handle is the handler for MessageReactionAdd events.
func (eh messageReactionAddHandler) Handle(s Session, i any) {
	if t, ok := i.(*MessageReactionAdd); ok {
		eh(s, t)
	}
}

// messageReactionRemoveHandler is an event handler for MessageReactionRemove events.
type messageReactionRemoveHandler func(Session, *MessageReactionRemove)

// Type returns the event type for MessageReactionRemove events.
func (eh messageReactionRemoveHandler) Type() string {
	return MessageReactionRemoveType
}

// New returns a new instance of MessageReactionRemove.
func (eh messageReactionRemoveHandler) New() any {
	return &MessageReactionRemove{}
}

// Handle is the handler for MessageReactionRemove events.
func (eh messageReactionRemoveHandler) Handle(s Session, i any) {
	if t, ok := i.(*MessageReactionRemove); ok {
		eh(s, t)
	}
}

// messageReactionRemoveAllHandler is an event handler for MessageReactionRemoveAll events.
type messageReactionRemoveAllHandler func(Session, *MessageReactionRemoveAll)

// Type returns the event type for MessageReactionRemoveAll events.
func (eh messageReactionRemoveAllHandler) Type() string {
	return MessageReactionRemoveAllType
}

// New returns a new instance of MessageReactionRemoveAll.
func (eh messageReactionRemoveAllHandler) New() any {
	return &MessageReactionRemoveAll{}
}

// Handle is the handler for MessageReactionRemoveAll events.
func (eh messageReactionRemoveAllHandler) Handle(s Session, i any) {
	if t, ok := i.(*MessageReactionRemoveAll); ok {
		eh(s, t)
	}
}

// messageUpdateHandler is an event handler for MessageUpdate events.
type messageUpdateHandler func(Session, *MessageUpdate)

// Type returns the event type for MessageUpdate events.
func (eh messageUpdateHandler) Type() string {
	return MessageUpdateType
}

// New returns a new instance of MessageUpdate.
func (eh messageUpdateHandler) New() any {
	return &MessageUpdate{}
}

// Handle is the handler for MessageUpdate events.
func (eh messageUpdateHandler) Handle(s Session, i any) {
	if t, ok := i.(*MessageUpdate); ok {
		eh(s, t)
	}
}

// presenceUpdateHandler is an event handler for PresenceUpdate events.
type presenceUpdateHandler func(Session, *PresenceUpdate)

// Type returns the event type for PresenceUpdate events.
func (eh presenceUpdateHandler) Type() string {
	return PresenceUpdateType
}

// New returns a new instance of PresenceUpdate.
func (eh presenceUpdateHandler) New() any {
	return &PresenceUpdate{}
}

// Handle is the handler for PresenceUpdate events.
func (eh presenceUpdateHandler) Handle(s Session, i any) {
	if t, ok := i.(*PresenceUpdate); ok {
		eh(s, t)
	}
}

// presencesReplaceHandler is an event handler for PresencesReplace events.
type presencesReplaceHandler func(Session, *PresencesReplace)

// Type returns the event type for PresencesReplace events.
func (eh presencesReplaceHandler) Type() string {
	return PresencesReplaceType
}

// New returns a new instance of PresencesReplace.
func (eh presencesReplaceHandler) New() any {
	return &PresencesReplace{}
}

// Handle is the handler for PresencesReplace events.
func (eh presencesReplaceHandler) Handle(s Session, i any) {
	if t, ok := i.(*PresencesReplace); ok {
		eh(s, t)
	}
}

// rateLimitHandler is an event handler for RateLimit events.
type rateLimitHandler func(Session, *RateLimit)

// Type returns the event type for RateLimit events.
func (eh rateLimitHandler) Type() string {
	return RateLimitType
}

// Handle is the handler for RateLimit events.
func (eh rateLimitHandler) Handle(s Session, i any) {
	if t, ok := i.(*RateLimit); ok {
		eh(s, t)
	}
}

// readyHandler is an event handler for Ready events.
type readyHandler func(Session, *Ready)

// Type returns the event type for Ready events.
func (eh readyHandler) Type() string {
	return ReadyType
}

// New returns a new instance of Ready.
func (eh readyHandler) New() any {
	return &Ready{}
}

// Handle is the handler for Ready events.
func (eh readyHandler) Handle(s Session, i any) {
	if t, ok := i.(*Ready); ok {
		eh(s, t)
	}
}

// resumedHandler is an event handler for Resumed events.
type resumedHandler func(Session, *Resumed)

// Type returns the event type for Resumed events.
func (eh resumedHandler) Type() string {
	return ResumedType
}

// New returns a new instance of Resumed.
func (eh resumedHandler) New() any {
	return &Resumed{}
}

// Handle is the handler for Resumed events.
func (eh resumedHandler) Handle(s Session, i any) {
	if t, ok := i.(*Resumed); ok {
		eh(s, t)
	}
}

// stageInstanceEventCreateHandler is an event handler for StageInstanceEventCreate events.
type stageInstanceEventCreateHandler func(Session, *StageInstanceEventCreate)

// Type returns the event type for StageInstanceEventCreate events.
func (eh stageInstanceEventCreateHandler) Type() string {
	return StageInstanceEventCreateType
}

// New returns a new instance of StageInstanceEventCreate.
func (eh stageInstanceEventCreateHandler) New() any {
	return &StageInstanceEventCreate{}
}

// Handle is the handler for StageInstanceEventCreate events.
func (eh stageInstanceEventCreateHandler) Handle(s Session, i any) {
	if t, ok := i.(*StageInstanceEventCreate); ok {
		eh(s, t)
	}
}

// stageInstanceEventDeleteHandler is an event handler for StageInstanceEventDelete events.
type stageInstanceEventDeleteHandler func(Session, *StageInstanceEventDelete)

// Type returns the event type for StageInstanceEventDelete events.
func (eh stageInstanceEventDeleteHandler) Type() string {
	return StageInstanceEventDeleteType
}

// New returns a new instance of StageInstanceEventDelete.
func (eh stageInstanceEventDeleteHandler) New() any {
	return &StageInstanceEventDelete{}
}

// Handle is the handler for StageInstanceEventDelete events.
func (eh stageInstanceEventDeleteHandler) Handle(s Session, i any) {
	if t, ok := i.(*StageInstanceEventDelete); ok {
		eh(s, t)
	}
}

// stageInstanceEventUpdateHandler is an event handler for StageInstanceEventUpdate events.
type stageInstanceEventUpdateHandler func(Session, *StageInstanceEventUpdate)

// Type returns the event type for StageInstanceEventUpdate events.
func (eh stageInstanceEventUpdateHandler) Type() string {
	return StageInstanceEventUpdateType
}

// New returns a new instance of StageInstanceEventUpdate.
func (eh stageInstanceEventUpdateHandler) New() any {
	return &StageInstanceEventUpdate{}
}

// Handle is the handler for StageInstanceEventUpdate events.
func (eh stageInstanceEventUpdateHandler) Handle(s Session, i any) {
	if t, ok := i.(*StageInstanceEventUpdate); ok {
		eh(s, t)
	}
}

// subscriptionCreateHandler is an event handler for SubscriptionCreate events.
type subscriptionCreateHandler func(Session, *SubscriptionCreate)

// Type returns the event type for SubscriptionCreate events.
func (eh subscriptionCreateHandler) Type() string {
	return SubscriptionCreateType
}

// New returns a new instance of SubscriptionCreate.
func (eh subscriptionCreateHandler) New() any {
	return &SubscriptionCreate{}
}

// Handle is the handler for SubscriptionCreate events.
func (eh subscriptionCreateHandler) Handle(s Session, i any) {
	if t, ok := i.(*SubscriptionCreate); ok {
		eh(s, t)
	}
}

// subscriptionDeleteHandler is an event handler for SubscriptionDelete events.
type subscriptionDeleteHandler func(Session, *SubscriptionDelete)

// Type returns the event type for SubscriptionDelete events.
func (eh subscriptionDeleteHandler) Type() string {
	return SubscriptionDeleteType
}

// New returns a new instance of SubscriptionDelete.
func (eh subscriptionDeleteHandler) New() any {
	return &SubscriptionDelete{}
}

// Handle is the handler for SubscriptionDelete events.
func (eh subscriptionDeleteHandler) Handle(s Session, i any) {
	if t, ok := i.(*SubscriptionDelete); ok {
		eh(s, t)
	}
}

// subscriptionUpdateHandler is an event handler for SubscriptionUpdate events.
type subscriptionUpdateHandler func(Session, *SubscriptionUpdate)

// Type returns the event type for SubscriptionUpdate events.
func (eh subscriptionUpdateHandler) Type() string {
	return SubscriptionUpdateType
}

// New returns a new instance of SubscriptionUpdate.
func (eh subscriptionUpdateHandler) New() any {
	return &SubscriptionUpdate{}
}

// Handle is the handler for SubscriptionUpdate events.
func (eh subscriptionUpdateHandler) Handle(s Session, i any) {
	if t, ok := i.(*SubscriptionUpdate); ok {
		eh(s, t)
	}
}

// threadCreateHandler is an event handler for ThreadCreate events.
type threadCreateHandler func(Session, *ThreadCreate)

// Type returns the event type for ThreadCreate events.
func (eh threadCreateHandler) Type() string {
	return ThreadCreateType
}

// New returns a new instance of ThreadCreate.
func (eh threadCreateHandler) New() any {
	return &ThreadCreate{}
}

// Handle is the handler for ThreadCreate events.
func (eh threadCreateHandler) Handle(s Session, i any) {
	if t, ok := i.(*ThreadCreate); ok {
		eh(s, t)
	}
}

// threadDeleteHandler is an event handler for ThreadDelete events.
type threadDeleteHandler func(Session, *ThreadDelete)

// Type returns the event type for ThreadDelete events.
func (eh threadDeleteHandler) Type() string {
	return ThreadDeleteType
}

// New returns a new instance of ThreadDelete.
func (eh threadDeleteHandler) New() any {
	return &ThreadDelete{}
}

// Handle is the handler for ThreadDelete events.
func (eh threadDeleteHandler) Handle(s Session, i any) {
	if t, ok := i.(*ThreadDelete); ok {
		eh(s, t)
	}
}

// threadListSyncHandler is an event handler for ThreadListSync events.
type threadListSyncHandler func(Session, *ThreadListSync)

// Type returns the event type for ThreadListSync events.
func (eh threadListSyncHandler) Type() string {
	return ThreadListSyncType
}

// New returns a new instance of ThreadListSync.
func (eh threadListSyncHandler) New() any {
	return &ThreadListSync{}
}

// Handle is the handler for ThreadListSync events.
func (eh threadListSyncHandler) Handle(s Session, i any) {
	if t, ok := i.(*ThreadListSync); ok {
		eh(s, t)
	}
}

// threadMemberUpdateHandler is an event handler for ThreadMemberUpdate events.
type threadMemberUpdateHandler func(Session, *ThreadMemberUpdate)

// Type returns the event type for ThreadMemberUpdate events.
func (eh threadMemberUpdateHandler) Type() string {
	return ThreadMemberUpdateType
}

// New returns a new instance of ThreadMemberUpdate.
func (eh threadMemberUpdateHandler) New() any {
	return &ThreadMemberUpdate{}
}

// Handle is the handler for ThreadMemberUpdate events.
func (eh threadMemberUpdateHandler) Handle(s Session, i any) {
	if t, ok := i.(*ThreadMemberUpdate); ok {
		eh(s, t)
	}
}

// threadMembersUpdateHandler is an event handler for ThreadMembersUpdate events.
type threadMembersUpdateHandler func(Session, *ThreadMembersUpdate)

// Type returns the event type for ThreadMembersUpdate events.
func (eh threadMembersUpdateHandler) Type() string {
	return ThreadMembersUpdateType
}

// New returns a new instance of ThreadMembersUpdate.
func (eh threadMembersUpdateHandler) New() any {
	return &ThreadMembersUpdate{}
}

// Handle is the handler for ThreadMembersUpdate events.
func (eh threadMembersUpdateHandler) Handle(s Session, i any) {
	if t, ok := i.(*ThreadMembersUpdate); ok {
		eh(s, t)
	}
}

// threadUpdateHandler is an event handler for ThreadUpdate events.
type threadUpdateHandler func(Session, *ThreadUpdate)

// Type returns the event type for ThreadUpdate events.
func (eh threadUpdateHandler) Type() string {
	return ThreadUpdateType
}

// New returns a new instance of ThreadUpdate.
func (eh threadUpdateHandler) New() any {
	return &ThreadUpdate{}
}

// Handle is the handler for ThreadUpdate events.
func (eh threadUpdateHandler) Handle(s Session, i any) {
	if t, ok := i.(*ThreadUpdate); ok {
		eh(s, t)
	}
}

// typingStartHandler is an event handler for TypingStart events.
type typingStartHandler func(Session, *TypingStart)

// Type returns the event type for TypingStart events.
func (eh typingStartHandler) Type() string {
	return TypingStartType
}

// New returns a new instance of TypingStart.
func (eh typingStartHandler) New() any {
	return &TypingStart{}
}

// Handle is the handler for TypingStart events.
func (eh typingStartHandler) Handle(s Session, i any) {
	if t, ok := i.(*TypingStart); ok {
		eh(s, t)
	}
}

// userUpdateHandler is an event handler for UserUpdate events.
type userUpdateHandler func(Session, *UserUpdate)

// Type returns the event type for UserUpdate events.
func (eh userUpdateHandler) Type() string {
	return UserUpdateType
}

// New returns a new instance of UserUpdate.
func (eh userUpdateHandler) New() any {
	return &UserUpdate{}
}

// Handle is the handler for UserUpdate events.
func (eh userUpdateHandler) Handle(s Session, i any) {
	if t, ok := i.(*UserUpdate); ok {
		eh(s, t)
	}
}

// voiceServerUpdateHandler is an event handler for VoiceServerUpdate events.
type voiceServerUpdateHandler func(Session, *VoiceServerUpdate)

// Type returns the event type for VoiceServerUpdate events.
func (eh voiceServerUpdateHandler) Type() string {
	return VoiceServerUpdateType
}

// New returns a new instance of VoiceServerUpdate.
func (eh voiceServerUpdateHandler) New() any {
	return &VoiceServerUpdate{}
}

// Handle is the handler for VoiceServerUpdate events.
func (eh voiceServerUpdateHandler) Handle(s Session, i any) {
	if t, ok := i.(*VoiceServerUpdate); ok {
		eh(s, t)
	}
}

// voiceStateUpdateHandler is an event handler for VoiceStateUpdate events.
type voiceStateUpdateHandler func(Session, *VoiceStateUpdate)

// Type returns the event type for VoiceStateUpdate events.
func (eh voiceStateUpdateHandler) Type() string {
	return VoiceStateUpdateType
}

// New returns a new instance of VoiceStateUpdate.
func (eh voiceStateUpdateHandler) New() any {
	return &VoiceStateUpdate{}
}

// Handle is the handler for VoiceStateUpdate events.
func (eh voiceStateUpdateHandler) Handle(s Session, i any) {
	if t, ok := i.(*VoiceStateUpdate); ok {
		eh(s, t)
	}
}

// webhooksUpdateHandler is an event handler for WebhooksUpdate events.
type webhooksUpdateHandler func(Session, *WebhooksUpdate)

// Type returns the event type for WebhooksUpdate events.
func (eh webhooksUpdateHandler) Type() string {
	return WebhooksUpdateType
}

// New returns a new instance of WebhooksUpdate.
func (eh webhooksUpdateHandler) New() any {
	return &WebhooksUpdate{}
}

// Handle is the handler for WebhooksUpdate events.
func (eh webhooksUpdateHandler) Handle(s Session, i any) {
	if t, ok := i.(*WebhooksUpdate); ok {
		eh(s, t)
	}
}

func handlerForInterface(handler any) Handler {
	switch v := handler.(type) {
	case func(Session, any):
		return interfaceHandler(v)
	case func(Session, *ApplicationCommandPermissionsUpdate):
		return applicationCommandPermissionsUpdateHandler(v)
	case func(Session, *AutoModerationActionExecution):
		return autoModerationActionExecutionHandler(v)
	case func(Session, *AutoModerationRuleCreate):
		return autoModerationRuleCreateHandler(v)
	case func(Session, *AutoModerationRuleDelete):
		return autoModerationRuleDeleteHandler(v)
	case func(Session, *AutoModerationRuleUpdate):
		return autoModerationRuleUpdateHandler(v)
	case func(Session, *ChannelCreate):
		return channelCreateHandler(v)
	case func(Session, *ChannelDelete):
		return channelDeleteHandler(v)
	case func(Session, *ChannelPinsUpdate):
		return channelPinsUpdateHandler(v)
	case func(Session, *ChannelUpdate):
		return channelUpdateHandler(v)
	case func(Session, *Connect):
		return connectHandler(v)
	case func(Session, *Disconnect):
		return disconnectHandler(v)
	case func(Session, *EntitlementCreate):
		return entitlementCreateHandler(v)
	case func(Session, *EntitlementDelete):
		return entitlementDeleteHandler(v)
	case func(Session, *EntitlementUpdate):
		return entitlementUpdateHandler(v)
	case func(Session, *Event):
		return eventHandler(v)
	case func(Session, *GuildAuditLogEntryCreate):
		return guildAuditLogEntryCreateHandler(v)
	case func(Session, *GuildBanAdd):
		return guildBanAddHandler(v)
	case func(Session, *GuildBanRemove):
		return guildBanRemoveHandler(v)
	case func(Session, *GuildCreate):
		return guildCreateHandler(v)
	case func(Session, *GuildDelete):
		return guildDeleteHandler(v)
	case func(Session, *GuildEmojisUpdate):
		return guildEmojisUpdateHandler(v)
	case func(Session, *GuildIntegrationsUpdate):
		return guildIntegrationsUpdateHandler(v)
	case func(Session, *GuildMemberAdd):
		return guildMemberAddHandler(v)
	case func(Session, *GuildMemberRemove):
		return guildMemberRemoveHandler(v)
	case func(Session, *GuildMemberUpdate):
		return guildMemberUpdateHandler(v)
	case func(Session, *GuildMembersChunk):
		return guildMembersChunkHandler(v)
	case func(Session, *GuildRoleCreate):
		return guildRoleCreateHandler(v)
	case func(Session, *GuildRoleDelete):
		return guildRoleDeleteHandler(v)
	case func(Session, *GuildRoleUpdate):
		return guildRoleUpdateHandler(v)
	case func(Session, *GuildScheduledEventCreate):
		return guildScheduledEventCreateHandler(v)
	case func(Session, *GuildScheduledEventDelete):
		return guildScheduledEventDeleteHandler(v)
	case func(Session, *GuildScheduledEventUpdate):
		return guildScheduledEventUpdateHandler(v)
	case func(Session, *GuildScheduledEventUserAdd):
		return guildScheduledEventUserAddHandler(v)
	case func(Session, *GuildScheduledEventUserRemove):
		return guildScheduledEventUserRemoveHandler(v)
	case func(Session, *GuildStickersUpdate):
		return guildStickersUpdateHandler(v)
	case func(Session, *GuildUpdate):
		return guildUpdateHandler(v)
	case func(Session, *IntegrationCreate):
		return integrationCreateHandler(v)
	case func(Session, *IntegrationDelete):
		return integrationDeleteHandler(v)
	case func(Session, *IntegrationUpdate):
		return integrationUpdateHandler(v)
	case func(Session, *InteractionCreate):
		return interactionCreateHandler(v)
	case func(Session, *InviteCreate):
		return inviteCreateHandler(v)
	case func(Session, *InviteDelete):
		return inviteDeleteHandler(v)
	case func(Session, *MessageCreate):
		return messageCreateHandler(v)
	case func(Session, *MessageDelete):
		return messageDeleteHandler(v)
	case func(Session, *MessageDeleteBulk):
		return messageDeleteBulkHandler(v)
	case func(Session, *MessagePollVoteAdd):
		return messagePollVoteAddHandler(v)
	case func(Session, *MessagePollVoteRemove):
		return messagePollVoteRemoveHandler(v)
	case func(Session, *MessageReactionAdd):
		return messageReactionAddHandler(v)
	case func(Session, *MessageReactionRemove):
		return messageReactionRemoveHandler(v)
	case func(Session, *MessageReactionRemoveAll):
		return messageReactionRemoveAllHandler(v)
	case func(Session, *MessageUpdate):
		return messageUpdateHandler(v)
	case func(Session, *PresenceUpdate):
		return presenceUpdateHandler(v)
	case func(Session, *PresencesReplace):
		return presencesReplaceHandler(v)
	case func(Session, *RateLimit):
		return rateLimitHandler(v)
	case func(Session, *Ready):
		return readyHandler(v)
	case func(Session, *Resumed):
		return resumedHandler(v)
	case func(Session, *StageInstanceEventCreate):
		return stageInstanceEventCreateHandler(v)
	case func(Session, *StageInstanceEventDelete):
		return stageInstanceEventDeleteHandler(v)
	case func(Session, *StageInstanceEventUpdate):
		return stageInstanceEventUpdateHandler(v)
	case func(Session, *SubscriptionCreate):
		return subscriptionCreateHandler(v)
	case func(Session, *SubscriptionDelete):
		return subscriptionDeleteHandler(v)
	case func(Session, *SubscriptionUpdate):
		return subscriptionUpdateHandler(v)
	case func(Session, *ThreadCreate):
		return threadCreateHandler(v)
	case func(Session, *ThreadDelete):
		return threadDeleteHandler(v)
	case func(Session, *ThreadListSync):
		return threadListSyncHandler(v)
	case func(Session, *ThreadMemberUpdate):
		return threadMemberUpdateHandler(v)
	case func(Session, *ThreadMembersUpdate):
		return threadMembersUpdateHandler(v)
	case func(Session, *ThreadUpdate):
		return threadUpdateHandler(v)
	case func(Session, *TypingStart):
		return typingStartHandler(v)
	case func(Session, *UserUpdate):
		return userUpdateHandler(v)
	case func(Session, *VoiceServerUpdate):
		return voiceServerUpdateHandler(v)
	case func(Session, *VoiceStateUpdate):
		return voiceStateUpdateHandler(v)
	case func(Session, *WebhooksUpdate):
		return webhooksUpdateHandler(v)
	}

	return nil
}

func init() {
	registerInterfaceProvider(applicationCommandPermissionsUpdateHandler(nil))
	registerInterfaceProvider(autoModerationActionExecutionHandler(nil))
	registerInterfaceProvider(autoModerationRuleCreateHandler(nil))
	registerInterfaceProvider(autoModerationRuleDeleteHandler(nil))
	registerInterfaceProvider(autoModerationRuleUpdateHandler(nil))
	registerInterfaceProvider(channelCreateHandler(nil))
	registerInterfaceProvider(channelDeleteHandler(nil))
	registerInterfaceProvider(channelPinsUpdateHandler(nil))
	registerInterfaceProvider(channelUpdateHandler(nil))
	registerInterfaceProvider(entitlementCreateHandler(nil))
	registerInterfaceProvider(entitlementDeleteHandler(nil))
	registerInterfaceProvider(entitlementUpdateHandler(nil))
	registerInterfaceProvider(guildAuditLogEntryCreateHandler(nil))
	registerInterfaceProvider(guildBanAddHandler(nil))
	registerInterfaceProvider(guildBanRemoveHandler(nil))
	registerInterfaceProvider(guildCreateHandler(nil))
	registerInterfaceProvider(guildDeleteHandler(nil))
	registerInterfaceProvider(guildEmojisUpdateHandler(nil))
	registerInterfaceProvider(guildIntegrationsUpdateHandler(nil))
	registerInterfaceProvider(guildMemberAddHandler(nil))
	registerInterfaceProvider(guildMemberRemoveHandler(nil))
	registerInterfaceProvider(guildMemberUpdateHandler(nil))
	registerInterfaceProvider(guildMembersChunkHandler(nil))
	registerInterfaceProvider(guildRoleCreateHandler(nil))
	registerInterfaceProvider(guildRoleDeleteHandler(nil))
	registerInterfaceProvider(guildRoleUpdateHandler(nil))
	registerInterfaceProvider(guildScheduledEventCreateHandler(nil))
	registerInterfaceProvider(guildScheduledEventDeleteHandler(nil))
	registerInterfaceProvider(guildScheduledEventUpdateHandler(nil))
	registerInterfaceProvider(guildScheduledEventUserAddHandler(nil))
	registerInterfaceProvider(guildScheduledEventUserRemoveHandler(nil))
	registerInterfaceProvider(guildStickersUpdateHandler(nil))
	registerInterfaceProvider(guildUpdateHandler(nil))
	registerInterfaceProvider(integrationCreateHandler(nil))
	registerInterfaceProvider(integrationDeleteHandler(nil))
	registerInterfaceProvider(integrationUpdateHandler(nil))
	registerInterfaceProvider(interactionCreateHandler(nil))
	registerInterfaceProvider(inviteCreateHandler(nil))
	registerInterfaceProvider(inviteDeleteHandler(nil))
	registerInterfaceProvider(messageCreateHandler(nil))
	registerInterfaceProvider(messageDeleteHandler(nil))
	registerInterfaceProvider(messageDeleteBulkHandler(nil))
	registerInterfaceProvider(messagePollVoteAddHandler(nil))
	registerInterfaceProvider(messagePollVoteRemoveHandler(nil))
	registerInterfaceProvider(messageReactionAddHandler(nil))
	registerInterfaceProvider(messageReactionRemoveHandler(nil))
	registerInterfaceProvider(messageReactionRemoveAllHandler(nil))
	registerInterfaceProvider(messageUpdateHandler(nil))
	registerInterfaceProvider(presenceUpdateHandler(nil))
	registerInterfaceProvider(presencesReplaceHandler(nil))
	registerInterfaceProvider(readyHandler(nil))
	registerInterfaceProvider(resumedHandler(nil))
	registerInterfaceProvider(stageInstanceEventCreateHandler(nil))
	registerInterfaceProvider(stageInstanceEventDeleteHandler(nil))
	registerInterfaceProvider(stageInstanceEventUpdateHandler(nil))
	registerInterfaceProvider(subscriptionCreateHandler(nil))
	registerInterfaceProvider(subscriptionDeleteHandler(nil))
	registerInterfaceProvider(subscriptionUpdateHandler(nil))
	registerInterfaceProvider(threadCreateHandler(nil))
	registerInterfaceProvider(threadDeleteHandler(nil))
	registerInterfaceProvider(threadListSyncHandler(nil))
	registerInterfaceProvider(threadMemberUpdateHandler(nil))
	registerInterfaceProvider(threadMembersUpdateHandler(nil))
	registerInterfaceProvider(threadUpdateHandler(nil))
	registerInterfaceProvider(typingStartHandler(nil))
	registerInterfaceProvider(userUpdateHandler(nil))
	registerInterfaceProvider(voiceServerUpdateHandler(nil))
	registerInterfaceProvider(voiceStateUpdateHandler(nil))
	registerInterfaceProvider(webhooksUpdateHandler(nil))
}
