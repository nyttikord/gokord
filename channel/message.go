package channel

import (
	"encoding/json"
	"github.com/nyttikord/gokord"
	"github.com/nyttikord/gokord/application"
	"github.com/nyttikord/gokord/components"
	"github.com/nyttikord/gokord/emoji"
	"github.com/nyttikord/gokord/user"
	"io"
	"regexp"
	"strings"
	"time"
)

// MessageType is the type of Message
// https://discord.com/developers/docs/resources/channel#message-object-message-types
type MessageType int

// Block contains the valid known MessageType values
const (
	MessageTypeDefault                               MessageType = 0
	MessageTypeRecipientAdd                          MessageType = 1
	MessageTypeRecipientRemove                       MessageType = 2
	MessageTypeCall                                  MessageType = 3
	MessageTypeChannelNameChange                     MessageType = 4
	MessageTypeChannelIconChange                     MessageType = 5
	MessageTypeChannelPinnedMessage                  MessageType = 6
	MessageTypeGuildMemberJoin                       MessageType = 7
	MessageTypeUserPremiumGuildSubscription          MessageType = 8
	MessageTypeUserPremiumGuildSubscriptionTierOne   MessageType = 9
	MessageTypeUserPremiumGuildSubscriptionTierTwo   MessageType = 10
	MessageTypeUserPremiumGuildSubscriptionTierThree MessageType = 11
	MessageTypeChannelFollowAdd                      MessageType = 12
	MessageTypeGuildDiscoveryDisqualified            MessageType = 14
	MessageTypeGuildDiscoveryRequalified             MessageType = 15
	MessageTypeThreadCreated                         MessageType = 18
	MessageTypeReply                                 MessageType = 19
	MessageTypeChatInputCommand                      MessageType = 20
	MessageTypeThreadStarterMessage                  MessageType = 21
	MessageTypeContextMenuCommand                    MessageType = 23
)

// A Message stores all data related to a specific Discord message.
type Message struct {
	// The ID of the message.
	ID string `json:"id"`

	// The ID of the channel in which the message was sent.
	ChannelID string `json:"channel_id"`

	// The ID of the guild in which the message was sent.
	GuildID string `json:"guild_id,omitempty"`

	// The content of the message.
	Content string `json:"content"`

	// The time at which the messsage was sent.
	// CAUTION: this field may be removed in a
	// future API version; it is safer to calculate
	// the creation time via the ID.
	Timestamp time.Time `json:"timestamp"`

	// The time at which the last edit of the message
	// occurred, if it has been edited.
	EditedTimestamp *time.Time `json:"edited_timestamp"`

	// The roles mentioned in the message.
	MentionRoles []string `json:"mention_roles"`

	// Whether the message is text-to-speech.
	TTS bool `json:"tts"`

	// Whether the message mentions everyone.
	MentionEveryone bool `json:"mention_everyone"`

	// The author of the message. This is not guaranteed to be a
	// valid user (webhook-sent messages do not possess a full author).
	Author *user.User `json:"author"`

	// A list of attachments present in the message.
	Attachments []*MessageAttachment `json:"attachments"`

	// A list of components attached to the message.
	Components []components.MessageComponent `json:"-"`

	// A list of embeds present in the message.
	Embeds []*MessageEmbed `json:"embeds"`

	// A list of users mentioned in the message.
	Mentions []*user.User `json:"mentions"`

	// A list of reactions to the message.
	Reactions []*MessageReactions `json:"reactions"`

	// Whether the message is pinned or not.
	Pinned bool `json:"pinned"`

	// The type of the message.
	Type MessageType `json:"type"`

	// The webhook ID of the message, if it was generated by a webhook
	WebhookID string `json:"webhook_id"`

	// Member properties for this message's author,
	// contains only partial information
	Member *user.Member `json:"member"`

	// Channels specifically mentioned in this message
	// Not all channel mentions in a message will appear in mention_channels.
	// Only textual channels that are visible to everyone in a lurkable guild will ever be included.
	// Only crossposted messages (via Channel Following) currently include mention_channels at all.
	// If no mentions in the message meet these requirements, this field will not be sent.
	MentionChannels []*Channel `json:"mention_channels"`

	// Is sent with Rich Presence-related chat embeds
	Activity *MessageActivity `json:"activity"`

	// Is sent with Rich Presence-related chat embeds
	Application *MessageApplication `json:"application"`

	// MessageReference contains reference data sent with crossposted or reply messages.
	// This does not contain the reference *to* this message; this is for when *this* message references another.
	// To generate a reference to this message, use (*Message).Reference().
	MessageReference *MessageReference `json:"message_reference"`

	// The message associated with the message_reference
	// NOTE: This field is only returned for messages with a type of 19 (REPLY) or 21 (THREAD_STARTER_MESSAGE).
	// If the message is a reply but the referenced_message field is not present,
	// the backend did not attempt to fetch the message that was being replied to, so its state is unknown.
	// If the field exists but is null, the referenced message was deleted.
	ReferencedMessage *Message `json:"referenced_message"`

	// The message associated with the message_reference.
	// This is a minimal subset of fields in a message (e.g. Author is excluded)
	// NOTE: This field is only returned when referenced when MessageReference.Type is MessageReferenceTypeForward.
	MessageSnapshots []MessageSnapshot `json:"message_snapshots"`

	// Deprecated, use InteractionMetadata.
	// Is sent when the message is a response to an Interaction, without an existing message.
	// This means responses to message component interactions do not include this property,
	// instead including a MessageReference, as components exist on preexisting messages.
	Interaction *MessageInteraction `json:"interaction"`

	InteractionMetadata *MessageInteractionMetadata `json:"interaction_metadata"`

	// The flags of the message, which describe extra features of a message.
	// This is a combination of bit masks; the presence of a certain permission can
	// be checked by performing a bitwise AND between this int and the flag.
	Flags MessageFlags `json:"flags"`

	// The thread that was started from this message, includes thread member object
	Thread *Channel `json:"thread,omitempty"`

	// An array of StickerItem objects, representing sent stickers, if there were any.
	StickerItems []*emoji.StickerItem `json:"sticker_items"`

	// A poll object.
	Poll *Poll `json:"poll"`
}

// UnmarshalJSON is a helper function to unmarshal the Message.
func (m *Message) UnmarshalJSON(data []byte) error {
	type message Message
	var v struct {
		message
		RawComponents []components.UnmarshalableMessageComponent `json:"components"`
	}
	err := json.Unmarshal(data, &v)
	if err != nil {
		return err
	}
	*m = Message(v.message)
	m.Components = make([]components.MessageComponent, len(v.RawComponents))
	for i, v := range v.RawComponents {
		m.Components[i] = v.MessageComponent
	}
	return err
}

// GetCustomEmojis pulls out all the custom (Non-unicode) emojis from a message and returns a Slice of the Emoji struct.
func (m *Message) GetCustomEmojis() []*emoji.Emoji {
	var toReturn []*emoji.Emoji
	emojis := emoji.EmojiRegex.FindAllString(m.Content, -1)
	if len(emojis) < 1 {
		return toReturn
	}
	for _, em := range emojis {
		parts := strings.Split(em, ":")
		toReturn = append(toReturn, &emoji.Emoji{
			ID:       parts[2][:len(parts[2])-1],
			Name:     parts[1],
			Animated: strings.HasPrefix(em, "<a:"),
		})
	}
	return toReturn
}

// MessageFlags is the flags of "message" (see MessageFlags* consts)
// https://discord.com/developers/docs/resources/channel#message-object-message-flags
type MessageFlags int

// Valid MessageFlags values
const (
	// MessageFlagsCrossPosted This message has been published to subscribed channels (via Channel Following).
	MessageFlagsCrossPosted MessageFlags = 1 << 0
	// MessageFlagsIsCrossPosted this message originated from a message in another channel (via Channel Following).
	MessageFlagsIsCrossPosted MessageFlags = 1 << 1
	// MessageFlagsSuppressEmbeds do not include any embeds when serializing this message.
	MessageFlagsSuppressEmbeds MessageFlags = 1 << 2
	// TODO: deprecated, remove when compatibility is not needed
	MessageFlagsSupressEmbeds MessageFlags = 1 << 2
	// MessageFlagsSourceMessageDeleted the source message for this crosspost has been deleted (via Channel Following).
	MessageFlagsSourceMessageDeleted MessageFlags = 1 << 3
	// MessageFlagsUrgent this message came from the urgent message system.
	MessageFlagsUrgent MessageFlags = 1 << 4
	// MessageFlagsHasThread this message has an associated thread, with the same id as the message.
	MessageFlagsHasThread MessageFlags = 1 << 5
	// MessageFlagsEphemeral this message is only visible to the user who invoked the Interaction.
	MessageFlagsEphemeral MessageFlags = 1 << 6
	// MessageFlagsLoading this message is an Interaction Response and the bot is "thinking".
	MessageFlagsLoading MessageFlags = 1 << 7
	// MessageFlagsFailedToMentionSomeRolesInThread this message failed to mention some roles and add their members to the thread.
	MessageFlagsFailedToMentionSomeRolesInThread MessageFlags = 1 << 8
	// MessageFlagsSuppressNotifications this message will not trigger push and desktop notifications.
	MessageFlagsSuppressNotifications MessageFlags = 1 << 12
	// MessageFlagsIsVoiceMessage this message is a voice message.
	MessageFlagsIsVoiceMessage MessageFlags = 1 << 13
	// MessageFlagsIsComponentsV2 this message uses the new components system. Disables the ability of sending `content` & `embeds`
	MessageFlagsIsComponentsV2 MessageFlags = 1 << 15
)

// File stores info about files you e.g. send in messages.
type File struct {
	Name        string
	ContentType string
	Reader      io.Reader
}

// A MessageAttachment stores data for message attachments.
type MessageAttachment struct {
	ID           string                 `json:"id"`
	URL          string                 `json:"url"`
	ProxyURL     string                 `json:"proxy_url"`
	Filename     string                 `json:"filename"`
	ContentType  string                 `json:"content_type"`
	Width        int                    `json:"width"`
	Height       int                    `json:"height"`
	Size         int                    `json:"size"`
	Ephemeral    bool                   `json:"ephemeral"`
	DurationSecs float64                `json:"duration_secs"`
	Waveform     string                 `json:"waveform"`
	Flags        MessageAttachmentFlags `json:"flags"`
}

// MessageAttachmentFlags is the flags of a message attachment.
type MessageAttachmentFlags int

// Valid MessageAttachmentFlags values.
const (
	MessageAttachmentFlagsIsRemix MessageAttachmentFlags = 1 << 2
)

// MessageReactions holds a reactions object for a message.
type MessageReactions struct {
	Count int          `json:"count"`
	Me    bool         `json:"me"`
	Emoji *emoji.Emoji `json:"emoji"`
}

// MessageActivity is sent with Rich Presence-related chat embeds
type MessageActivity struct {
	Type    MessageActivityType `json:"type"`
	PartyID string              `json:"party_id"`
}

// MessageActivityType is the type of message activity
type MessageActivityType int

// Constants for the different types of Message Activity
const (
	MessageActivityTypeJoin        MessageActivityType = 1
	MessageActivityTypeSpectate    MessageActivityType = 2
	MessageActivityTypeListen      MessageActivityType = 3
	MessageActivityTypeJoinRequest MessageActivityType = 5
)

// MessageApplication is sent with Rich Presence-related chat embeds
type MessageApplication struct {
	ID          string `json:"id"`
	CoverImage  string `json:"cover_image"`
	Description string `json:"description"`
	Icon        string `json:"icon"`
	Name        string `json:"name"`
}

// MessageSnapshot represents a snapshot of a forwarded message.
// https://discord.com/developers/docs/resources/message#message-snapshot-object
type MessageSnapshot struct {
	Message *Message `json:"message"`
}

// MessageReferenceType is a type of MessageReference
type MessageReferenceType int

// Known valid MessageReferenceType values
// https://discord.com/developers/docs/resources/message#message-reference-types
const (
	MessageReferenceTypeDefault MessageReferenceType = 0
	MessageReferenceTypeForward MessageReferenceType = 1
)

// MessageReference contains reference data sent with crossposted messages
type MessageReference struct {
	Type            MessageReferenceType `json:"type,omitempty"`
	MessageID       string               `json:"message_id"`
	ChannelID       string               `json:"channel_id,omitempty"`
	GuildID         string               `json:"guild_id,omitempty"`
	FailIfNotExists *bool                `json:"fail_if_not_exists,omitempty"`
}

func (m *Message) reference(refType MessageReferenceType, failIfNotExists bool) *MessageReference {
	return &MessageReference{
		Type:            refType,
		GuildID:         m.GuildID,
		ChannelID:       m.ChannelID,
		MessageID:       m.ID,
		FailIfNotExists: &failIfNotExists,
	}
}

// Reference returns a MessageReference of the given message.
func (m *Message) Reference() *MessageReference {
	return m.reference(MessageReferenceTypeDefault, true)
}

// SoftReference returns a MessageReference of the given message.
// If the message doesn't exist it will instead be sent as a non-reply message.
func (m *Message) SoftReference() *MessageReference {
	return m.reference(MessageReferenceTypeDefault, false)
}

// Forward returns a MessageReference for a forwarded message.
func (m *Message) Forward() *MessageReference {
	return m.reference(MessageReferenceTypeForward, true)
}

// ContentWithMentionsReplaced will replace all @<id> mentions with the
// username of the mention.
func (m *Message) ContentWithMentionsReplaced() (content string) {
	content = m.Content

	for _, u := range m.Mentions {
		content = strings.NewReplacer(
			"<@"+u.ID+">", "@"+u.Username,
			"<@!"+u.ID+">", "@"+u.Username,
		).Replace(content)
	}
	return
}

var patternChannels = regexp.MustCompile("<#[^>]*>")

// ContentWithMoreMentionsReplaced will replace all @<id> mentions with the
// username of the mention, but also role IDs and more.
// TODO: remove from message package
//func (m *Message) ContentWithMoreMentionsReplaced(s *gokord.Session) (content string, err error) {
//	content = m.Content
//
//	if !s.StateEnabled {
//		content = m.ContentWithMentionsReplaced()
//		return
//	}
//
//	channel, err := s.State.Channel(m.ChannelID)
//	if err != nil {
//		content = m.ContentWithMentionsReplaced()
//		return
//	}
//
//	for _, u := range m.Mentions {
//		nick := u.Username
//
//		member, err := s.State.Member(channel.GuildID, u.ID)
//		if err == nil && member.Nick != "" {
//			nick = member.Nick
//		}
//
//		content = strings.NewReplacer(
//			"<@"+u.ID+">", "@"+u.Username,
//			"<@!"+u.ID+">", "@"+nick,
//		).Replace(content)
//	}
//	for _, roleID := range m.MentionRoles {
//		role, err := s.State.Role(channel.GuildID, roleID)
//		if err != nil || !role.Mentionable {
//			continue
//		}
//
//		content = strings.Replace(content, "<@&"+role.ID+">", "@"+role.Name, -1)
//	}
//
//	content = patternChannels.ReplaceAllStringFunc(content, func(mention string) string {
//		channel, err := s.State.Channel(mention[2 : len(mention)-1])
//		if err != nil || channel.Type == ChannelTypeGuildVoice {
//			return mention
//		}
//
//		return "#" + channel.Name
//	})
//	return
//}

// MessageInteraction contains information about the application command interaction which generated the message.
type MessageInteraction struct {
	ID   string                 `json:"id"`
	Type gokord.InteractionType `json:"type"`
	Name string                 `json:"name"`
	User *user.User             `json:"user"`

	// Member is only present when the interaction is from a guild.
	Member *user.Member `json:"member"`
}

// MessageInteractionMetadata contains metadata of an interaction, including relevant user info.
type MessageInteractionMetadata struct {
	// ID of the interaction.
	ID string `json:"id"`
	// Type of the interaction.
	Type gokord.InteractionType `json:"type"`
	// User who triggered the interaction.
	User *user.User `json:"user"`
	// IDs for installation context(s) related to an interaction.
	AuthorizingIntegrationOwners map[application.IntegrationType]string `json:"authorizing_integration_owners"`
	// ID of the original response message.
	// NOTE: present only on followup messages.
	OriginalResponseMessageID string `json:"original_response_message_id,omitempty"`
	// ID of the message that contained interactive component.
	// NOTE: present only on message component interactions.
	InteractedMessageID string `json:"interacted_message_id,omitempty"`
	// Metadata for interaction that was used to open a modal.
	// NOTE: present only on modal submit interactions.
	TriggeringInteractionMetadata *MessageInteractionMetadata `json:"triggering_interaction_metadata,omitempty"`
}

// MessageReaction stores the data for a message reaction.
type MessageReaction struct {
	UserID    string      `json:"user_id"`
	MessageID string      `json:"message_id"`
	Emoji     emoji.Emoji `json:"emoji"`
	ChannelID string      `json:"channel_id"`
	GuildID   string      `json:"guild_id,omitempty"`
}
