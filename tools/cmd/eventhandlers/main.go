package main

import (
	"bytes"
	"go/format"
	"go/parser"
	"go/token"
	"log"
	"os"
	"path/filepath"
	"regexp"
	"sort"
	"strings"
	"text/template"
)

var HandlerTmpl = template.Must(template.New("Handler").Funcs(template.FuncMap{
	"constName":      constName,
	"isDiscordEvent": isDiscordEvent,
	"privateName":    privateName,
}).Parse(`// Code generated by tools/cmd/Handlers; DO NOT EDIT
// See events.go

package event 

import (
	"context"

	"github.com/nyttikord/gokord/bot"
)

// Following are all the event types.
// Event type values are used to match the events returned by Discord.
// EventTypes surrounded by __ are synthetic and are internal to DiscordGo.
const ({{range .}}
  {{.}}Type = "{{constName .}}"{{end}}
)
{{range .}}
// {{privateName .}}Handler is an event handler for {{.}} events.
type {{privateName .}}Handler func(context.Context, bot.Session, *{{.}})

// Type returns the event type for {{.}} events.
func (eh {{privateName .}}Handler) Type() string {
  return {{.}}Type
}
{{if isDiscordEvent .}}
// New returns a new instance of {{.}}.
func (eh {{privateName .}}Handler) New() any {
  return &{{.}}{}
}{{end}}
// Handle is the handler for {{.}} events.
func (eh {{privateName .}}Handler) Handle(ctx context.Context, s bot.Session, i any) {
  if t, ok := i.(*{{.}}); ok {
    eh(ctx, s, t)
  }
}

{{end}}
func handlerForInterface(handler any) Handler {
  switch v := handler.(type) {
  case func(context.Context, bot.Session, any):
    return interfaceHandler(v){{range .}}
  case func(context.Context, bot.Session, *{{.}}):
    return {{privateName .}}Handler(v){{end}}
  }

  return nil
}

func init() { {{range .}}{{if isDiscordEvent .}}
  registerInterfaceProvider({{privateName .}}Handler(nil)){{end}}{{end}}
}
`))

func main() {
	var buf bytes.Buffer
	dir := filepath.Dir(".")

	fs := token.NewFileSet()
	parsedFile, err := parser.ParseFile(fs, "events.go", nil, 0)
	if err != nil {
		log.Fatalf("warning: internal error: could not parse events.go: %s", err)
		return
	}

	names := []string{}
	for object := range parsedFile.Scope.Objects {
		names = append(names, object)
	}
	sort.Strings(names)
	err = HandlerTmpl.Execute(&buf, names)
	if err != nil {
		panic(err)
	}

	src, err := format.Source(buf.Bytes())
	if err != nil {
		log.Println("warning: internal error: invalid Go generated:", err)
		src = buf.Bytes()
	}

	err = os.WriteFile(filepath.Join(dir, strings.ToLower("event_handlers.go")), src, 0644)
	if err != nil {
		log.Fatal(buf, "writing output: %s", err)
	}
}

var constRegexp = regexp.MustCompile("([a-z])([A-Z])")

func constCase(name string) string {
	return strings.ToUpper(constRegexp.ReplaceAllString(name, "${1}_${2}"))
}

func isDiscordEvent(name string) bool {
	return !(name == "Connect" ||
		name == "Disconnect" ||
		name == "Event" ||
		name == "RateLimit" ||
		name == "Interface")
}

func constName(name string) string {
	if !isDiscordEvent(name) {
		return "__" + constCase(name) + "__"
	}

	return constCase(name)
}

func privateName(name string) string {
	return strings.ToLower(string(name[0])) + name[1:]
}
